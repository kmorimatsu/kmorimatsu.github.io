/*******************************
* ZK-80 web written by Katsumi *
*   This script is released    *
*     under the LGPL v2.1.     *
*******************************/

memory.rom=[
0xf3,0xed,0x56,0x31,0xd1,0x83,0x18,0x33,0xc3,0x0c,0x01,0x00,0x00,0x00,0x00,0x00,
0xc3,0xd1,0x83,0x00,0x00,0x00,0x00,0x00,0xc3,0xd4,0x83,0x00,0x00,0x00,0x00,0x00,
0xc3,0xd7,0x83,0x00,0x00,0x00,0x00,0x00,0xc3,0xda,0x83,0x00,0x00,0x00,0x00,0x00,
0xc3,0xdd,0x83,0x00,0x00,0x00,0x00,0x00,0xc3,0xd3,0x00,0xaf,0x21,0xe0,0x83,0x06,
0x14,0x77,0x23,0x10,0xfc,0xcd,0xa1,0x01,0xcd,0x16,0x02,0x2a,0xee,0x83,0xed,0x4b,
0xec,0x83,0xd6,0x10,0x28,0x47,0x3d,0xca,0xb7,0x00,0x3d,0x28,0x1e,0x3d,0x28,0x29,
0x3d,0x28,0x23,0x3d,0x28,0x26,0x3d,0x28,0x26,0x3d,0x28,0x28,0xc6,0x17,0x60,0x69,
0x29,0x29,0x29,0x29,0x85,0x6f,0x22,0xec,0x83,0x18,0xca,0x60,0x69,0x22,0xee,0x83,
0x4e,0x2b,0x66,0x69,0x18,0xf0,0x23,0x18,0xf4,0x2b,0x18,0xf1,0x71,0x18,0xf7,0xaf,
0xd3,0x9e,0x18,0xb1,0x3e,0x01,0xd3,0x9e,0xcd,0xa1,0x01,0x18,0xa8,0x2a,0xee,0x83,
0xcb,0x7c,0x20,0x01,0xe9,0x11,0x45,0x00,0x21,0xc8,0x83,0x72,0x2b,0x73,0x22,0xe2,
0x83,0x2a,0xee,0x83,0x22,0xe0,0x83,0xed,0x7b,0xe2,0x83,0x2a,0xea,0x83,0xe5,0xf1,
0x2a,0xe0,0x83,0xe5,0xed,0x4b,0xe8,0x83,0xed,0x5b,0xe6,0x83,0x2a,0xe4,0x83,0xed,
0x56,0xfb,0xc9,0x22,0xe4,0x83,0xf5,0xe1,0x22,0xea,0x83,0xed,0x43,0xe8,0x83,0xed,
0x53,0xe6,0x83,0xe1,0x22,0xe0,0x83,0xed,0x73,0xe2,0x83,0xeb,0x3a,0xf2,0x83,0xb7,
0x28,0x0d,0x2a,0xf0,0x83,0xed,0x52,0x20,0xbe,0x3d,0x32,0xf2,0x83,0x20,0xb8,0xed,
0x53,0xee,0x83,0x2a,0xea,0x83,0x22,0xec,0x83,0xc3,0x45,0x00,0xdd,0x22,0xee,0x83,
0xfd,0x22,0xec,0x83,0xc3,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x06,0x04,0x21,0xef,0x83,0x11,0xf4,0x83,0x7e,0x12,0x2b,0x13,0x10,0xfa,0x18,
0x0f,0xe6,0x0f,0xe5,0x21,0xd7,0x01,0x85,0x6f,0x7e,0x12,0x13,0xe1,0xc9,0x00,0x00,
0x21,0xf4,0x83,0x11,0xf8,0x83,0x06,0x04,0x7e,0x1f,0x1f,0x1f,0x1f,0xcd,0xb1,0x01,
0x7e,0x23,0xcd,0xb1,0x01,0x10,0xf1,0x5c,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x27,0x7f,
0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x06,0x06,0xcd,0x0c,0x02,0x20,0x0d,0x06,0x05,
0xcd,0x0c,0x02,0x20,0x06,0x06,0x03,0xcd,0x0c,0x02,0xd0,0x16,0xff,0x14,0x1f,0x38,
0xfc,0x3e,0xf8,0xc6,0x08,0xcb,0x08,0x38,0xfa,0x82,0x37,0xc9,0x78,0xd3,0x9c,0xdb,
0x9c,0xfe,0xff,0xc9,0x00,0x00,0xcd,0xea,0x02,0xcd,0xe7,0x01,0x38,0xfb,0xcd,0xea,
0x02,0x18,0x03,0xc3,0xe7,0x01,0xcd,0xe7,0x01,0x30,0xfb,0xc9,0x00,0xc5,0x0e,0x9f,
0xed,0x40,0x0d,0xed,0x48,0x10,0xfe,0x0d,0x20,0xfb,0xc1,0xc9,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcd,0x2d,0x02,0x18,0x0e,0xcd,
0x2d,0x02,0xcd,0x2d,0x02,0xcd,0x2d,0x02,0xcd,0x2d,0x02,0x18,0xed,0xc3,0x2d,0x02
];


/* Source code follows.
;This code can be aseembled by the attached htmlfile, z80v09.html, or higher version.

(0000)
di
im 1
ld sp,83d1
jr init:
end:
(0008)
jp show_ix_iy:
(0010)
jp 83d1
(0018)
jp 83d4
(0020)
jp 83d7
(0028)
jp 83da
(0030)
jp 83dd
(0038)
jp step:

init:
xor a
ld hl,83e0
ld b,14
loop_init:
  ld (hl),a
  inc hl
djnz loop_init:

main:
// Show address and data
call showaddrdata:
// Check key input (result will be in A register)
call keyinput:
// In advance, load address and data
// into HL and BC registers
ld hl,(83ee) // address
ld bc,(83ec) // data
// Check if command key, first.
sub 10
jr z,run_key:
dec a
jp z,ret_key:
dec a
jr z,adrs_key:
dec a
jr z,decr_key:
dec a
jr z,incr_key:
dec a
jr z,write_key:
dec a
jr z,store_key:
dec a
jr z,load_key:
add a,17
// In the case of num key
// Shift 4 bits in data register,
// then add value in A register.
ld h,b
ld l,c
add hl,hl
add hl,hl
add hl,hl
add hl,hl
add a,l
ld l,a
update_data:
ld (83ec),hl
jr main:

adrs_key:
ld h,b
ld l,c

read:
ld (83ee),hl
ld c,(hl)
dec hl
ld h,(hl)
ld l,c
jr update_data:

incr_key:
inc hl
jr read:

decr_key:
dec hl
jr read:

write_key:
ld (hl),c
jr incr_key:

store_key:
xor a
out 9e,a
jr main:

load_key:
ld a,01
out 9e,a
call showaddrdata:
jr main:

run_key:
ld hl,(83ee)
bit 7,h
jr nz,user_run_key:
// Simply jump to address in monitor program.
jp (hl)
user_run_key:
ld de,main:
ld hl,83c8
ld (hl),d
dec hl
ld (hl),e
ld (83e2),hl
ld hl,(83ee)
ld (83e0),hl
ret_key:
ld sp,(83e2)
reg_ret_key:
ld hl,(83ea)
push hl
pop af
ld hl,(83e0)
push hl
ld bc,(83e8)
ld de,(83e6)
ld hl,(83e4)
im 1
ei
ret
end:

;83E0  PC
;83E2  SP
;83E4  HL
;83E6  DE
;83E8  BC
;83EA  AF
;83F0  Break address
;83F2  Break counter (8 bit)
step:
ld (83e4),hl
push af
pop hl
ld (83ea),hl
ld (83e8),bc
ld (83e6),de
pop hl
ld (83e0),hl
ld (83e2),sp
ex de,hl
ld a,(83f2)
or a
label:
jr z,show_step:
ld hl,(83f0)
sbc hl,de // Carry is always 0
jr nz,ret_key:
dec a
ld (83f2),a
jr nz,ret_key:
show_step:
ld (83ee),de
ld hl,(83ea)
ld (83ec),hl
jp main:
end:

show_ix_iy:
ld (83ee),ix
ld (83ec),iy
jp main:
end:

// About 140 bytes available here for some code.

(01a1)
showaddrdata:

;Show the address and data
;83EC data
;83EE address

ld b,04
ld hl,83ef
ld de,83f4
loop_showaddrdata:
ld a,(hl)
ld (de),a
dec hl
inc de
djnz loop_showaddrdata:
jr showsegdata:

// Write a character (4 bits)
showsegdatasub:
and 0f
push hl
ld hl,segdatatable:
add a,l
ld l,a
ld a,(hl)
ld (de),a
inc de
pop hl
ret
end:

(01c0)
showsegdata:
;Show the data in display register
;as 7 segment data in LED
;83F4 display register
;83F4: left most
;83F7: right most
ld hl,83f4
ld de,83f8
ld b,04
loop_showsegdata:
ld a,(hl)
rra
rra
rra
rra
call showsegdatasub:
ld a,(hl)
inc hl
call showsegdatasub:
djnz loop_showsegdata:
end:

segdatatable:

;Hexadecimal to 7 segment conversion table

5C 06 5B 4F
66 6D 7D 27
7F 6F 77 7C
39 5E 79 71

keyinputmain:

;Key input (returns without input)
;Result will be in A register.
;When not pressed,
;A register will be 0xff,
;and carry flag will be 1.
;0-00, 1-01, 2-02, 3-03,
;4-04, 5-05, 6-06, 7-07,
;8-08, 9-09, A-0A, B-0B,
;C-0C, D-0D, E-0E, F-0F
;RET-11, RUN-10,
;STORE DATA-16, LOAD DATA-17
;ADRS SET-12, READ INCR-14,
;READ DECR-13, WRITE INCR-15

ld b,06
call keyinputmain0:
jr nz,keyinputmain2:
ld b,05
call keyinputmain0:
jr nz,keyinputmain2:
ld b,03
call keyinputmain0:
ret nc
keyinputmain2:
ld d,ff
loop_keyinputmain2:
  inc d
  rra
jr c,loop_keyinputmain2:
ld a,f8
loop2_keyinputmain2:
  add a,08
  rrc b
jr c,loop2_keyinputmain2:
add a,d
scf
ret

keyinputmain0:
ld a,b
out 9c,a
in a,9c
cp ff
ret
end:

(0216)
keyinput:

;Key input.  Wait until a key will be pressed.

call timer9:   // Wait 9 msec,
loop_keyinput: // then detect key up.
  call keyinputmain:
jr c,loop_keyinput:
call timer9:   // After detection, wait 9 msec,
jr keyinput2:  // then go forward.
end:           // Above code works against chattering.

(0223)
keyinputsub:

;Key input routine
;Just jump to the main routine.

jp keyinputmain:

keyinput2:      // Remaining key detection routine
  call keyinputmain:
jr nc,keyinput2: // If there is key input,
ret             // return immediately.
end:

(022d)
;Wait for 4.5 ms
;17+11+7+12+4+13*(B-1)+8+4+7+
;(13*255+8+4+12)*(C-1)+
;10+10=9212 when BC=0xBD03
;9212/2048=4.50
timer45:
push bc
ld c,9f
in b,(c) // B=0xBD when 2.048 MHz
dec c
in c,(c) // C=0x03 when 2.048 MHz
loop_timer45:
djnz loop_timer45:
dec c
jr nz, loop_timer45:
pop bc
ret
end:

// About 170 bytes available here for some code.

// 027c: Serial out routine
// 02a0: Serial in routine

(02ea)
// Wait for 9.0 ms
timer9:
call timer45:
jr timer27_2:
end:
(02ef)
// Wait for 27 ms
timer27:
call timer45:
call timer45:
call timer45:
call timer45:
jr timer9:
timer27_2:
jp timer45:
end:

//*/